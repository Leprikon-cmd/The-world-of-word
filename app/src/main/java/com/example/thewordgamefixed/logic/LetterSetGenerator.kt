// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤ –¥–ª—è –∏–≥—Ä—ã: –≤—ã–±–∏—Ä–∞–µ–º 5 –±—É–∫–≤ –∏ –∏—â–µ–º –≤—Å–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –Ω–∏—Ö (—Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏)
package com.example.thewordgamefixed.logic

object LetterSetGenerator {
    private const val LETTER_COUNT = 5            // üî¢ —Ä–∞–∑–º–µ—Ä –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤ (–∑–≤–µ–∑–¥–∞)
    private const val MIN_VALID_WORDS = 5         // üìâ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∏–∑ —ç—Ç–∏—Ö –±—É–∫–≤

    fun generateSet(): LetterSet? {
        val words = DictionaryManager.getWords()

        // 1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ (–º–æ–∂–Ω–æ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏)
        val candidates = words.filter { it.length == LETTER_COUNT }.shuffled()

        for (base in candidates) {
            val letters = base.toList() // ‚¨ÖÔ∏è —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–∂–µ –ø–æ–≤—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü, –õ, –ê, –ù, –ü)

            // 2Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∏–∑ —ç—Ç–∏—Ö –±—É–∫–≤ —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–π
            val matching = words.filter { w ->
                w.length >= 3 &&
                        canBuildWord(w, letters)
            }

            if (matching.size >= MIN_VALID_WORDS) {
                return LetterSet(letters, matching.toSet())
            }
        }

        return null // ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—É—Å—Ç—å –ø—Ä–æ–±—É–µ—Ç –∑–∞–Ω–æ–≤–æ
    }

    // üîß –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∏–∑ available –±—É–∫–≤ (—É—á–∏—Ç—ã–≤–∞—è –ø–æ–≤—Ç–æ—Ä—ã)
    private fun canBuildWord(word: String, available: List<Char>): Boolean {
        return word.all { it in available }
    }

    data class LetterSet(
        val letters: List<Char>,    // üü° 5 –±—É–∫–≤ (–≤–æ–∑–º–æ–∂–Ω–æ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏)
        val words: Set<String>      // ‚úÖ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–∏—Ö –±—É–∫–≤
    )
}