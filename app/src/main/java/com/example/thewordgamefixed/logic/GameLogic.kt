// –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ‚Äî –±—É–∫–≤—ã –∑–≤–µ–∑–¥—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞
// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω —Å–ª–æ–≤–∞—Ä—å –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π

package com.example.thewordgamefixed.logic

import com.example.thewordgamefixed.logic.DictionaryManager
import com.example.thewordgamefixed.logic.LetterSetGenerator

// ++ –õ–æ–≥–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –∑–≤–µ–∑–¥—ã: –±—É–∫–≤—ã + –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞
object GameLogic {

    // + –ù–∞–±–æ—Ä –±—É–∫–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    private var currentLetters: List<Char> = emptyList()
    private var validWords: Set<String> = emptySet()

    // + –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É—Ä–æ–≤–Ω—è
    fun generateNewLevel() {
        val set = LetterSetGenerator.generateSet()
        if (set != null) {
            currentLetters = set.letters
            validWords = set.words
            android.util.Log.d("GameLogic", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –±—É–∫–≤—ã: $currentLetters")
            android.util.Log.d("GameLogic", "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞: $validWords")
        } else {
            currentLetters = listOf('–ê', '–†', '–°', '–¢', '–£') // fallback
            validWords = emptySet()
            android.util.Log.w("GameLogic", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–∞–ø–∞—Å–Ω–æ–π")
        }
    }

    fun getLetters(): List<Char> = currentLetters

    fun isValidWord(input: String): Boolean {
        val word = input.uppercase()
        return word.length >= 3 && validWords.contains(word)
    }

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ—à—Ç—É—á–Ω–æ –∏–∑ –±—É–∫–≤ –Ω–∞–±–æ—Ä–∞
    private fun canBuildWord(word: String, letters: List<Char>): Boolean {
        val available = letters.groupingBy { it }.eachCount().toMutableMap()
        for (c in word) {
            val count = available.getOrDefault(c, 0)
            if (count == 0) return false
            available[c] = count - 1
        }
        return true
    }
    fun getValidWords(): List<String> = validWords.toList()
}