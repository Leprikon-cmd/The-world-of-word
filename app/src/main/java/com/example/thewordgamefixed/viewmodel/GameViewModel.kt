package com.example.thewordgamefixed.viewmodel

import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import com.example.thewordgamefixed.logic.GameLogic

class GameViewModel : ViewModel() {

    val backgroundImage = mutableStateOf("Background1.jpg") // üé® —Ç–µ–∫—É—â–∏–π —Ñ–æ–Ω

    fun pickNewBackground() {
        val index = (1..17).random() // üì∏ —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏
        backgroundImage.value = "Background$index.jpg"
    }

    val selectedLetters = mutableStateListOf<Char>() // ‚úçÔ∏è —Ç–µ–∫—É—â–µ–µ –Ω–∞–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ (–ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ)
    val result = mutableStateOf("") // üí¨ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ("‚úÖ —Å–ª–æ–≤–æ", "‚ùå")

    val validWords = mutableStateListOf<String>() // üìã –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞ –∏–∑ GameLogic
    val foundWords = mutableStateListOf<String>() // ‚úÖ —É–≥–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞

    private var lastAddedChar: Char? = null // üß† –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Ç–∞–ø–∞ –ø–æ —Ç–æ–π –∂–µ –±—É–∫–≤–µ –ø–æ–¥—Ä—è–¥

    val score = mutableStateOf(0) // üßÆ —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç

    fun resetGame() {
        foundWords.clear()              // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        score.value = 0                 // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç
        result.value = ""               // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        selectedLetters.clear()         // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–≤–æ–¥
        updateWords()                   // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–ª–æ–≤
    }

    fun validateWord() {
        val word = selectedLetters.joinToString("")
        tryAddWord(word)                // üëà –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ
        clearSelection()                // üßπ –æ—á–∏—â–∞–µ–º –≤–≤–æ–¥ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏
    }

    fun tryAddWord(word: String) {
        if (GameLogic.isValidWord(word) && !foundWords.contains(word)) {
            foundWords.add(word)       // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
            addScore(word.length)      // ‚ûï –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
            result.value = "‚úÖ $word"   // —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        } else {
            result.value = "‚ùå"         // ‚ùå –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        }
    }

    fun getFoundWordCount(): Int = foundWords.size // üëâ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö
    fun getTotalValidWordCount(): Int = GameLogic.getValidWords().size // üëâ –≤—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö

    private fun addScore(length: Int) {
        // üìä –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –ø–æ –¥–ª–∏–Ω–µ —Å–ª–æ–≤–∞
        val base = when (length) {
            in 3..4 -> 10
            5 -> 20
            6 -> 30
            else -> 40 + (length - 6) * 5
        }
        score.value += base
    }

    fun updateWords() {
        validWords.clear()
        validWords.addAll(GameLogic.getValidWords().sortedByDescending { it.length }) // üì• –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    }

    fun addLetter(letter: Char) {
        selectedLetters.add(letter) // ‚ûï –¥–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É –≤ –≤–≤–æ–¥
    }

    fun clearSelection() {
        selectedLetters.clear()     // üßπ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥
        result.value = ""           // üßπ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lastAddedChar = null        // üîÑ —Å–±—Ä–æ—Å –∑–∞—â–∏—Ç—ã
    }

    fun getWord(): String = selectedLetters.joinToString("") // üî§ —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
}