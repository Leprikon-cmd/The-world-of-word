package com.example.thewordgamefixed.ui

import android.graphics.BitmapFactory
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.thewordgamefixed.logic.GameLogic
import com.example.thewordgamefixed.viewmodel.GameViewModel

@Composable
fun GameScreen(viewModel: GameViewModel = viewModel()) {
    // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–æ–Ω –∏–∑ assets
    val context = LocalContext.current
    val imageBitmap = remember(viewModel.backgroundImage.value) {
        val assetManager = context.assets
        val inputStream = assetManager.open("Background/${viewModel.backgroundImage.value}")
        BitmapFactory.decodeStream(inputStream)?.asImageBitmap()
    }

    // ‚úÖ –í—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–ª–∏–Ω–µ –∏ –∞–ª—Ñ–∞–≤–∏—Ç—É
    val words = viewModel.validWords
        .sortedWith(compareByDescending<String> { it.length }.thenBy { it })

    val showWordListForDebug = true // ‚Üê –ú–µ–Ω—è–π –Ω–∞ true –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    val foundWords = viewModel.foundWords

    Box(modifier = Modifier.fillMaxSize()) {
        // üì∑ –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        imageBitmap?.let {
            Image(
                bitmap = it,
                contentDescription = null,
                contentScale = ContentScale.Crop,
                modifier = Modifier.fillMaxSize()
            )
        }

        // üß© –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.Top,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {

            Text(
                text = "–ù–∞–π–¥–µ–Ω–æ: ${viewModel.getFoundWordCount()} –∏–∑ ${viewModel.getTotalValidWordCount()}",
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.padding(bottom = 4.dp)
            )

            Text(
                text = "–û—á–∫–∏: ${viewModel.score.value}",
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.padding(bottom = 12.dp)
            )

            // üìù –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ ‚Äî –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—ç–∫—Ä–∞–Ω–∞
            if (showWordListForDebug) {
                LazyVerticalGrid(
                    columns = GridCells.Fixed(2),
                    modifier = Modifier
                        .fillMaxWidth()
                        .heightIn(max = 220.dp)
                        .padding(bottom = 8.dp),
                    horizontalArrangement = Arrangement.spacedBy(12.dp),
                    verticalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    items(viewModel.validWords) { word ->
                        val isFound = viewModel.foundWords.contains(word)

                        Text(
                            text = if (isFound) word else "-".repeat(word.length),
                            style = MaterialTheme.typography.bodyLarge,
                            modifier = Modifier.padding(4.dp)
                        )
                    }
                }

                Spacer(modifier = Modifier.height(12.dp))
            }

            // üîò –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 12.dp),
                contentAlignment = Alignment.Center
            ) {
                Button(onClick = {
                    GameLogic.generateNewLevel()
                    viewModel.updateWords()         // üîÑ —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
                    viewModel.resetGame()           // üßπ –æ—á–∏—â–∞–µ–º –≤—Å—ë —Å—Ç–∞—Ä–æ–µ (–≤–∫–ª—é—á–∞—è foundWords –∏ score)
                    viewModel.pickNewBackground()   // üé® –Ω–æ–≤—ã–π —Ñ–æ–Ω
                }) {
                    Text("üîÑ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥")
                }
            }

            // ‚≠ê –ó–≤–µ–∑–¥–∞ ‚Äî –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f),
                contentAlignment = Alignment.Center
            ) {
                GameBoard(viewModel)
            }
        }
    }
}