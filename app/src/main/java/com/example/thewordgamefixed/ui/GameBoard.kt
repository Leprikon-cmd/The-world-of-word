// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥—ã –∏–∑ –±—É–∫–≤
// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–≤–∞–π–ø –æ—Ç –±—É–∫–≤—ã –∫ –±—É–∫–≤–µ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–æ

package com.example.thewordgamefixed.ui

import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.unit.*
import androidx.compose.ui.graphics.Color
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.thewordgamefixed.logic.GameLogic
import com.example.thewordgamefixed.viewmodel.GameViewModel
import kotlin.math.*

@Composable
fun GameBoard(viewModel: GameViewModel = viewModel()) {
    val letters = GameLogic.getLetters()
    val starPoints = remember { mutableStateListOf<Pair<Offset, Char>>() }
    val density = LocalDensity.current

    var boxSize by remember { mutableStateOf(IntSize.Zero) }

    // --- ‚úÖ –ù–ê–°–¢–†–û–ô–ö–ò –í–ò–ó–£–ê–õ–ê ---
    val starSize = 220.dp             // ‚¨ÖÔ∏è –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –∑–≤–µ–∑–¥—ã
    val radiusDp = 80.dp              // ‚¨ÖÔ∏è —Ä–∞–¥–∏—É—Å –∑–≤–µ–∑–¥—ã
    val letterCircleSize = 32.dp      // ‚¨ÖÔ∏è —Ä–∞–∑–º–µ—Ä –±—É–∫–≤—ã
    val letterFontSize = 20.sp        // ‚¨ÖÔ∏è —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    val touchRadius = 30.dp           // ‚¨ÖÔ∏è —Ä–∞–¥–∏—É—Å –¥–ª—è —Å–≤–∞–π–ø–∞
    // ---------------------------

    val radiusPx = with(density) { radiusDp.toPx() }
    val letterRadiusPx = with(density) { touchRadius.toPx() }

    Column(
        horizontalAlignment = Alignment.CenterHorizontally // ‚ûï –¶–µ–Ω—Ç—Ä—É–µ–º –≤—Å—ë –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    ) {
        // üëâ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        Text(
            text = viewModel.getWord(),
            fontSize = 24.sp,
            modifier = Modifier.padding(top = 12.dp, bottom = 8.dp)
        )

        // üëâ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ("‚úÖ –í–µ—Ä–Ω–æ!" / "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")
        Text(
            text = viewModel.result.value,
            fontSize = 18.sp,
            color = Color.Gray,
            modifier = Modifier.padding(bottom = 60.dp)
        )

        // üëâ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–≤–µ–∑–¥—ã –∏–∑ –±—É–∫–≤
        Box(
            modifier = Modifier
                .size(starSize) // üìê –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –∑–≤–µ–∑–¥—ã
                .onGloballyPositioned { coordinates ->
                    boxSize = coordinates.size // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä Box –≤ –ø–∏–∫—Å–µ–ª—è—Ö
                }
                .pointerInput(Unit) { // üîÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–≤–∞–π–ø—ã –ø–æ –∑–≤–µ–∑–¥–µ
                    detectDragGestures(
                        onDragStart = { offset ->
                            viewModel.clearSelection() // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–±—Ä–∞–Ω–Ω–æ–µ
                            checkTouched(offset, starPoints, letterRadiusPx)?.let {
                                viewModel.addLetter(it) // –¥–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É –ø–æ –Ω–∞–∂–∞—Ç–∏—é
                            }
                        },
                        onDrag = { change, _ ->
                            checkTouched(change.position, starPoints, letterRadiusPx)?.let {
                                viewModel.addLetter(it) // –¥–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É –ø–æ —Å–≤–∞–π–ø—É
                            }
                        },
                        onDragEnd = {
                            viewModel.validateWord() // –ø—Ä–æ–≤–µ—Ä–∫–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—É—Å—Ç–∏–ª –ø–∞–ª–µ—Ü
                        }
                    )
                }
        ) {
            if (boxSize != IntSize.Zero) {
                val center = Offset(boxSize.width / 2f, boxSize.height / 2f) // üéØ —Ü–µ–Ω—Ç—Ä –∑–≤–µ–∑–¥—ã

                starPoints.clear() // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

                // üîÅ –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º 5 –±—É–∫–≤ –ø–æ –∫—Ä—É–≥—É –≤ —Ñ–æ—Ä–º–µ –ø—è—Ç–∏–∫–æ–Ω–µ—á–Ω–æ–π –∑–≤–µ–∑–¥—ã
                letters.forEachIndexed { index, letter ->
                    val angleDeg = -90 + 144 * index // —É–≥–æ–ª –¥–ª—è 5-–∫–æ–Ω–µ—á–Ω–æ–π –∑–≤–µ–∑–¥—ã
                    val angleRad = angleDeg * (PI / 180f) // –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
                    val x = center.x + cos(angleRad) * radiusPx
                    val y = center.y + sin(angleRad) * radiusPx
                    starPoints.add(Offset(x.toFloat(), y.toFloat()) to letter)

                    // üì¶ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–¥–Ω—É –∏–∑ –±—É–∫–≤ –∑–≤–µ–∑–¥—ã
                    Box(
                        modifier = Modifier
                            .offset {
                                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                                val offset = with(density) { (letterCircleSize / 2).toPx() }
                                IntOffset((x - offset).toInt(), (y - offset).toInt())
                            }
                            .size(letterCircleSize), // —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ —Å –±—É–∫–≤–æ–π
                        contentAlignment = Alignment.Center
                    ) {
                        Text(letter.toString(), fontSize = letterFontSize)
                    }
                }
            }
        }
    }
}

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫—É—é-—Ç–æ –±—É–∫–≤—É –ø—Ä–∏ —Å–≤–∞–π–ø–µ
fun checkTouched(pos: Offset, points: List<Pair<Offset, Char>>, radius: Float): Char? {
    for ((offset, char) in points) {
        if ((offset - pos).getDistance() <= radius) return char
    }
    return null
}